Resources:

  HelloLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: HelloLambdaRole
      Policies:
        - PolicyName: KinesisPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'kinesis:PutRecord'
                Resource: !GetAtt HelloKinesisStream.Arn 
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
    

  HelloLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: HelloLambdaFunction
      Role: !GetAtt HelloLambdaRole.Arn
      Runtime: nodejs14.x
      Handler: index.publish
      Code:
        ZipFile: |
          const aws = require('aws-sdk');
          const uuid = require('uuid');

          module.exports.publish = (event, context, callback) => {
            const e = {
              id: uuid.v1(),
              partitionKey: event.partitionKey || uuid.v4(),
              timestamp: Date.now(),
              tags: {
                region: process.env.AWS_REGION,
              },
              ...event,
            }

            const params = {
              StreamName: "HelloKinesisStream",
              PartitionKey: e.partitionKey,
              Data: Buffer.from(JSON.stringify(e)),
            };

            const kinesis = new aws.Kinesis();
            kinesis.putRecord(params, callback);
          };

  HelloKinesisStream:
    Type: AWS::Kinesis::Stream
    Properties: 
      Name: HelloKinesisStream
      ShardCount: 1
